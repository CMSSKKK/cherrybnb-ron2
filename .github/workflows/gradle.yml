# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      working-directory: ./backend

    - name: Build with Gradle
      run: ./gradlew bootJar
      working-directory: ./backend
    
    - name: - name: Build and push Docker images
  # You may pin to the exact commit or the version.
  # uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8
  uses: docker/build-push-action@v3.0.0
  with:
    # List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)
    add-hosts: # optional
    # List of extra privileged entitlement (e.g., network.host,security.insecure)
    allow: # optional
    # List of build-time variables
    build-args: # optional
    # List of additional build contexts (e.g., name=path)
    build-contexts: # optional
    # Builder instance
    builder: # optional
    # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
    cache-from: # optional
    # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
    cache-to: # optional
    # Optional parent cgroup for the container used in the build
    cgroup-parent: # optional
    # Build's context is the set of files located in the specified PATH or URL
    context: # optional
    # Path to the Dockerfile
    file: # optional
    # List of metadata for an image
    labels: # optional
    # Load is a shorthand for --output=type=docker
    load: # optional, default is false
    # Set the networking mode for the RUN instructions during build
    network: # optional
    # Do not use cache when building the image
    no-cache: # optional, default is false
    # List of output destinations (format: type=local,dest=path)
    outputs: # optional
    # List of target platforms for build
    platforms: # optional
    # Always attempt to pull all referenced images
    pull: # optional, default is false
    # Push is a shorthand for --output=type=registry
    push: # optional, default is false
    # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
    secrets: # optional
    # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
    secret-files: # optional
    # Size of /dev/shm (e.g., 2g)
    shm-size: # optional
    # List of SSH agent socket or keys to expose to the build
    ssh: # optional
    # List of tags
    tags: # optional
    # Sets the target stage to build
    target: # optional
    # Ulimit options (e.g., nofile=1024:1024)
    ulimit: # optional
    # GitHub Token used to authenticate against a repository for Git context
    github-token: # optional, default is ${{ github.token }}
    
    
    - name: Build and Push Docker Image
      uses: mr-smithers-excellent/docker-build-push@v5.6
      with:
        image: cherrybnb/cherrybnb
        tags: v1, latest
        registry: docker.io
        dockerfile: ./backend/Dockerfile
        username: ${{ secrets.DOCKERHUB_ID }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          docker pull cherrybnb/cherrybnb:latest
          docker tag cherrybnb/cherrybnb:latest cherrybnb:latest
          docker stop cherry-server
          docker run -d --rm --name cherry-server -p 80:8080 -e DATABASE_USERNAME=${{secrets.DATABASE_USERNAME}} -e DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}} -e DATABASE_URL=${{secrets.DATABASE_URL}} cherrybnb:latest
